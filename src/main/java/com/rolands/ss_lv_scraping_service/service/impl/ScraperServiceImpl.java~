package com.rolands.ss_lv_scraping_service.service.impl;

import com.rolands.ss_lv_scraping_service.model.*;
import com.rolands.ss_lv_scraping_service.repositories.*;
import com.rolands.ss_lv_scraping_service.service.IScraperService;
import lombok.NoArgsConstructor;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.*;


@Service
@NoArgsConstructor
public class ScraperServiceImpl implements IScraperService {
    static private Logger logger = LoggerFactory.getLogger(ScraperServiceImpl.class);
    Map<UUID, Object> areasEntities = new HashMap<>();
    UUID[] areas;
    RealEstateTypeEntity realEstateType;
    int counter = 0;
    @Autowired
    AdvertisementRepository advertisementRepository;

    @Autowired
    ApartmentRepository apartmentRepository;

    @Autowired
    CityRepository cityRepository;

    @Autowired
    DistrictRepository districtRepository;

    @Autowired
    RealEstateTypeRepository realEstateTypeRepository;

    @Override
    public void fetchPage() {

        try {
            LinkedList<String> startEndpoints = new LinkedList<>(Arrays.asList(
                    "/lv/real-estate/flats"
            ));
            LinkedList<String> endpointTitles = new LinkedList<>(Arrays.asList("Apartment"));


            for (int i = 0; i < Math.min(startEndpoints.size(), endpointTitles.size()); i++) {
                areas = new UUID[2];
                Optional<RealEstateTypeEntity> optionalRealEstateTypeEntity = realEstateTypeRepository.findByRealEstateTypeName(endpointTitles.get(i));
                if(optionalRealEstateTypeEntity.isPresent()) {
                    realEstateType = optionalRealEstateTypeEntity.get();
                } else {
                    logger.info("Tiku te");
                    realEstateType = new RealEstateTypeEntity();
                    realEstateType.setRealEstateTypeName(endpointTitles.get(i));
                    realEstateType = realEstateTypeRepository.save(realEstateType);
                }

//                logger.info("Nomainijis tipu uz:" + realEstateType);
                goDeeper(startEndpoints.get(i));
            }

        } catch (Exception e) {
            logger.info("Failed to fetchPage: " + e.getMessage());
        }
    }

    private void goDeeper(String url) {

        url = "https://www.ss.lv" + url;

        try {
            Document doc = Jsoup.connect(url).get();

            if(doc.select(".filter_second_line_dv").size() > 0) {
                int count = readPages(url, 1, 1);
            } else {
                Elements links = doc.select("tbody h4 a");

                for(Element link : links) {
                    String href = link.attr("href");
                    String title = link.text();

                    if( title.equals("Visi sludinājumi")) {
                        logger.info("STOOOPPPP TIKAI NE : Visi sludinājumi");
                        continue;
                    }

                    if( title.equals("Dzīvokļi ārpus Latvijas")) {
                        logger.info("STOOOPPPP TIKAI NE : Dzīvokļi ārpus Latvijas");
                        continue;
                    }

                    if( title.equals("Cits")) {
                        logger.info("STOOOPPPP TIKAI NE : Cits");
                        continue;
                    }

                    if (areas[0] == null){
                        Optional<CityEntity> city = cityRepository.findByCityName(title);
                        CityEntity cityEntity;

                        if(city.isPresent()){
                            cityEntity = city.get();
                        } else {
                            cityEntity = new CityEntity();
                            cityEntity.setCityName(title);
                            cityEntity = cityRepository.save(cityEntity);
                        }
                        logger.info("Nomainijis pilsetu uz:" + title);
                        counter = 0;
                        areas[0] = cityEntity.getCityId();
                        areasEntities.put(areas[0], cityEntity);
                    } else if (areas[1] == null){
                        logger.info("Nomainijis rajonu uz:" + title);
                        Optional<DistrictEntity> district = districtRepository.findByDistrictName(title);
                        Optional<CityEntity> city = cityRepository.findById(areas[0]);

                        DistrictEntity districtEntity;

                        if(district.isPresent()){
                            districtEntity = district.get();
                        } else {
                            districtEntity = new DistrictEntity();
                            districtEntity.setDistrictName(title);
                            districtEntity.setCity(city.get());
                            districtEntity = districtRepository.save(districtEntity);
                        }
                        areas[1] = districtEntity.getDistrictId();
                        areasEntities.put(areas[1], districtEntity);
                    }

                    goDeeper(href);
                    if(areas[1] != null) {
                        areas[1] = null;
                    } else if(areas[0] != null) {
                        logger.info(counter + " " + title);
                        areas[0] = null;
                    }
                }
            }

        } catch (Exception e) {
            logger.info("Failed to goDeeper: " + e.getMessage());
        }
    }

    private int readPages(String url, int lives, int nextPage) throws IOException {

        String urlForPage = url + "/page" + nextPage +".html";
        Document doc = Jsoup.connect(urlForPage).get();
        Elements pageHref = doc.select("head link");
        int pageCounter = 0;

        boolean isFirstPage = pageHref.get(0).attr("href").contains("page1.html");
        if (isFirstPage && lives == 0){
            return 0;
        } else if (isFirstPage && lives >= 1){
            retrieveData(urlForPage);
            nextPage++;
            pageCounter = readPages(url, 0, nextPage) + 1;
        } else if(!isFirstPage && lives == 0){
            retrieveData(urlForPage);
            nextPage++;
            pageCounter = readPages(url, 0, nextPage) + 1;
        }

        return pageCounter;
    }

    private void retrieveData(String url) {
        ApartmentEntity[] apartments;

        try {
            // Fetch the HTML content from the website
            Document doc = Jsoup.connect(url).get();

            // Extract something, like all the links
            Elements rows = doc.select(".msga2-o");

            int loopCount = (rows.size() / 7);
            apartments = new ApartmentEntity[loopCount];

            for (int i = 0; i < rows.size(); i += 7) {
                String street = rows.get(i).text();
                String roomCount = rows.get(i+1).text();
                String area = rows.get(i+2).text();
                String floor = rows.get(i+3).text();
                String series = rows.get(i+4).text();
                String price = rows.get(i+6).text();

                String period;
                String transactionType;

                if(price.contains("mēn")){
                    period = "monthly";
                    transactionType = "renting";
                } else if (price.contains("dienā")){
                    period = "daily";
                    transactionType = "renting";
                } else if (price.contains("ned")) {
                    period = "weekly";
                    transactionType = "renting";
                } else {
                    period = "once";
                    transactionType = "selling";
                }


                if(unsuitableTransactionType(roomCount)) {
//                    logger.info(period);
                    counter++;
                    continue;
                }
                int index = i / 7;
                apartments[index] = new ApartmentEntity();
                apartments[index].setStreet(street);
                apartments[index].setRoomCount(Integer.valueOf(roomCount));
                apartments[index].setArea(Double.valueOf(extractNumber(area)));
                apartments[index].setFloor(Integer.valueOf(extractFirstPart(floor)));
                apartments[index].setSeries(series);
                apartments[index].setRealEstateType(realEstateType);
                apartments[index].setDistrict(areas[1]);
                if(areas[1]==null){
                    Optional<CityEntity> city = cityRepository.findById(areas[0]);

                    if(city.isPresent()) {
                        Optional<DistrictEntity> district = districtRepository.findByDistrictName(city.get().getCityName());
                        if (district.isPresent()) {
                            apartments[index].setDistrict(district.get().getDistrictId());
                        } else{
                            DistrictEntity districtEntity = new DistrictEntity();
                            districtEntity.setDistrictName(city.get().getCityName());
                            districtEntity.setCity((CityEntity) areasEntities.get(areas[0]));
                            districtRepository.save(districtEntity);
                            apartments[index].setDistrict(districtEntity.getDistrictId());
                        }
                    }
                }

                ApartmentEntity savedApartment = apartmentRepository.save(apartments[index]);

                saveAdvertisements(savedApartment, period, Double.valueOf(extractNumber(price)), transactionType);
            }

        } catch (Exception e) {
            logger.info("Failed to retrieveData: " + e.getMessage());
        }
    }

    private void saveAdvertisements(ApartmentEntity apartment, String period, Double price, String transactionType) {
        try {
            if(apartment != null) {
                AdvertisementEntity advertisement = new AdvertisementEntity();
                advertisement.setApartment(apartment);
                advertisement.setPeriod(period);
                advertisement.setPrice(price);
                advertisement.setTransactionType(transactionType);
                advertisement.setAdvertisementPostingDate(LocalDateTime.now());
                advertisementRepository.save(advertisement);
            } else {
                logger.info("kautkāda velna pec esmu ticis te");
//                for (ApartmentEntity apartment : apartments) {
//                    advertRepository.save(new AdvertisementEntity(apartment));
//                }
            }
        } catch (Exception e) {
            logger.info("Failed to saveAdvertisements: " + e.getMessage());
        }
    }

    private boolean unsuitableTransactionType(String transactionType) {
        String[] unsuitable = {"maiņai", "pērku", "-", "Citi", "."};
        for(String key : unsuitable) {
            if(transactionType.contains(key)) {
                return true;
            }
        }
        return false;
    }

    // Function to return the modified string
    static String extractNumber(String s) {

        // Replacing every non-digit character with a space (" ")
        s = s.replaceAll("[^\\d]", "");

        if(s == null || s.equals("-") || s.isEmpty()) {
            return "0";
        }

        // Remove extra spaces from the beginning and the end of the string
        s = s.trim();

        // Replace all consecutive white spaces with a single space
        s = s.replaceAll(" +", "");

        // Return -1 if the string is empty
        if (s.equals("")) {
            return "0";
        }

        return s;
    }

    public static String extractFirstPart(String input) {

        if(input == null || input.equals("-") || !input.contains("/")) {
            return "0";
        }
        input = input.split("/")[0];// Split by "/" and return the first part

        return input.split("\\.")[0];
    }
}